# Setup the genome and view to use for analyses
genome: hg38
path_genome_folder: resources/genome/
path_genome_fasta: resources/genome/hg38.fa
chromsizes: resources/genome/hg38_chromsizes.txt
view: resources/test_view.txt

# Samples file with two columns: sample name ("sample") and path/url with cool file ("file").
# If it's URL, it will be downloaded. If the file is already downloaded it will not be overwritten.
# The downloaded file will be stored as {coolers_folder}/{sample}.mcool
samples: config/samples.tsv
# Setting up pairwise comparisons of samples
# We just have two samples, so no need to ensure certain fields match, so we set this
# setting to null
fields_to_match: null
# To compare by cell type, we list the name of the column with cell type from the
# samples.tsv file, and indicate which cell type we consider as reference for the
# comparisons
fields_to_differ:
    cell_type: hESCs

# Annotations file with two columns: annotation name ("bedname") and "file" (URLs or local file)
# Downloaded bed files will be stored in beds_folder.
# Provide nothing here if you don't want to use any annotations.
annotations: config/annotations.tsv

# Rules about correpondence between samples and annotations can be specified here
# Provide nothing here if all annotations apply to all samples.
samples_annotations_combinations: config/samples_annotations.tsv

# folder definition is optional
# by default everything is done using inputs in inputs/
# and results saved in results/
inputs_folder: inputs
beds_folder: inputs/beds
bedpes_folder: inputs/bedpes
coolers_folder: inputs/coolers

project_folder: results
expected_folder: results/expected
pileups_folder: results/pileups
eigenvectors_folder: results/eigenvectors
saddles_folder: results/saddles
insulation_folder: results/insulation
tad_folder: results/tads
dot_folder: results/dots
boundary_folder: results/boundaries

expected:
    do: True #If False, still will calculate them when needed by other rules
    cis: True
    trans: True
    resolutions:
        - 1000
        - 10000
        - 100000
        - 1000000
    extra_args_cis: ""
    extra_args_trans: ""

# Parameters for calculation of the eigenvectors (cooltools eigs-cis or eigs-trans)
# They are phased using GC content whcih is automatically calculated from the genome .fastqs
eigenvector:
    do: True
    cis: True
    trans: True
    resolutions:
        - 100000
        - 1000000
    save_compartment_beds: True # If True, will run a simple HMM to save a .bed file
                                 # with coordinates of A and B compartments

# Parameters for saddles - a way to quantify global compartment structure (cooltools saddle)
saddle:
    do: True
    bins:
        - 100
    distance_limits:
        - 1600000
        - 102400000
    range: "--qrange 0.01 0.99 "
    extra: "--strength"

# Parameters for pentads, another way to average compartments
# Described in https://doi.org/10.1186/s12859-022-04654-6, but reimplemented using coolpuppy here
pentads:
    do: True
    do_diff: True
    data_resolution: 100000
    eigenvector_resolution: 1000000
    groupby:
        - chrom1
    norms:
        - expected
    modes:
        - local
        - distal

# Parameters for pileups using coolpuppy
pileups:
    do: True
    resolutions:
        - 10000
    distance_limits:
        - 500000
        - 1000000
        # - 12500
        # - 102400000
    shifts: 0
    expected: True
    ooe: True #Only applies when expected is True
    arguments: # Different modes of pileups that can be applied to different annotation
               # .bed files, relationship defined in samples_annotations_combinations file above
        distal: "--maxdist 1000000"
        by_distance: "--by_distance"
        local: "--local"
        local_rescaled: '--local --rescale --rescale_pad 1'
        by_strand_by_distance: "--by_strand --by_distance"
        by_strand_local: "--by_strand --local"
        by_strand_distal: "--by_strand --subset 10000 --maxdist 1000000"
        by_window_short_range: "--by_window --subset 1000 --maxdist 2000000"
        by_window_long_range:  "--by_window --subset 1000 --mindist 2000000"

# Parameters for calling dots/loops, using different methods
call_dots:
    methods:
        cooltools:
            do: True
            extra: "--max-loci-separation 10000000 --fdr 0.02"
        chromosight:
            do: True
            extra: ""
        mustache:
            do: True
            max_dist: 10000000
            extra: "-pt 0.05 -st 0.8"
    resolutions:
        - 10000
    pileup: True

# Parameters to calculate insulation score and how to threshold (cooltools insulation)
insulation:
    do: True
    resolutions:
        1000:
            - 3000 # What window sizes to do for what resolution
            - 5000
            - 10000
            - 25000
        10000:
            - 50000
            - 100000
    extra: '--chunksize 1000000000 --threshold Li --ignore-diags 2' # For the threshold,
                                                                    # choose between a specific float, Li, or Otsu,
                                                                    # see https://github.com/open2c/open2c_examples/blob/master/Insulation_and_boundaries.ipynb
    pileup: True # Whether to pileup thresholded boundaries


# Find differential boundaries between pairs of samples using a simple presence/absence or FC threshold for boundary strength
compare_boundaries:
    do: True
    fold_change_threshold: 5
    pileup: True

# Combine neighbouring strong insulation score boundaries into TADs
call_TADs: 
    do: True
    resolutions:
        10000: # What window sizes to do for what resolution
            - 50000
            - 100000
            - 1000000
    max_tad_length: 1500000
    pileup: True

